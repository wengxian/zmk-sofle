#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#include "mouse.dtsi"
#include "combo.dtsi"
#include "macro.dtsi"

/ {
    ltkp: ltkp {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        quick-tap-ms = <300>;
        require-prior-idle-ms = <125>;
    };

    ltsk: ltsk {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        bindings = <&mo>, <&sk>;
        flavor = "tap-preferred";
        tapping-term-ms = <300>;
        quick-tap-ms = <300>;
        require-prior-idle-ms = <125>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <U_WH_D>, <U_WH_U>;
        tap-ms = <20>;
    };

combos {
        compatible = "zmk,combos";

        combo_game {
            bindings = <&tog 1>;
            key-positions = <0 39>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_mouse {
            bindings = <&tog 2>;
            key-positions = <1 40>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_setting {
            bindings = <&tog 6>;
            key-positions = <4 43>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_bootloader {
            bindings = <&bootloader>;
            key-positions = <9 48>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <7 46>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_bt_clear_all {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <12 51>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_insert {
            slow-release;
            bindings = <&kp INS>;
            key-positions = <15 16>;
            timeout-ms = <15>;
        };

        combo_delete {
            slow-release;
            bindings = <&kp DEL>;
            key-positions = <28 29>;
            timeout-ms = <15>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <29 30>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <16 17>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <20 21>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <21 22>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <22 23>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <23 24>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <24 25>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_hash {
            slow-release;
            bindings = <&kp HASH>;
            key-positions = <27 28>;
            timeout-ms = <15>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <30 31>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <33 34>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <34 35>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_percent {
            bindings = <&kp PERCENT>;
            key-positions = <35 36>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <36 37>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <37 38>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <41 42>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_greater_than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <42 43>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <46 47>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_question {
            bindings = <&kp QUESTION>;
            key-positions = <47 48>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <48 49>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <49 50>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <50 51>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_ss {
            bindings = <&kp PSCRN>;
            key-positions = <5 44>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_pause_break {
            slow-release;
            bindings = <&kp PAUSE_BREAK>;
            key-positions = <14 15>;
            timeout-ms = <15>;
        };

        combo_scrolllock {
            bindings = <&kp SCROLLLOCK>;
            key-positions = <17 18>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_numlock {
            bindings = <&kp KP_NUMLOCK>;
            key-positions = <40 41>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };

        combo_capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <43 44>;
            timeout-ms = <15>;
            require-prior-idle-ms = <125>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp ESC    &kp N1    &kp N2     &kp N3  &kp N4         &kp N5        U_MS_U  &kp N6       &kp N7        &kp N8     &kp N9     &kp N0    &kp GRAVE
&kp TAB    &kp Q     &kp W      &kp E   &kp R          &kp T         U_MS_D  &kp Y        &kp U         &kp I      &kp O      &kp P     &kp BSLH
&kp BSPC   &kp A     &kp S      &kp D   &kp F          &kp G         U_MS_L  &kp H        &kp J         &kp K      &kp L      &kp SEMI  &kp APOS
&kp LSHFT  &kp Z     &kp X      &kp C   &kp V          &kp B         U_MS_R  &kp N        &kp M         &kp COMMA  &kp DOT    &kp FSLH  &kp ENTER
U_KP_R     &kp LALT  &kp LCTRL  &mo 3   &ltkp 4 SPACE  &ltsk 5 LGUI  U_KP_L  &ltkp 6 DEL  &ltkp 4 BSPC  &mo 3      &kp RCTRL  &kp RALT
            >;

            display-name = "QWERTY";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_1 {
            bindings = <
&kp ESC    &kp N1    &kp N2     &kp N3  &kp N4     &kp N5  U_MS_U  &kp N6  &kp N7  &kp N8     &kp N9     &kp N0    &kp GRAVE
&kp TAB    &kp Q     &kp W      &kp E   &kp R      &kp T   U_MS_D  &kp Y   &kp U   &kp I      &kp O      &kp P     &kp BSLH
&kp BSPC   &kp A     &kp S      &kp D   &kp F      &kp G   U_MS_L  &kp H   &kp J   &kp K      &kp L      &kp SEMI  &kp APOS
&kp LSHFT  &kp Z     &kp X      &kp C   &kp V      &kp B   U_MS_R  &kp N   &kp M   &kp COMMA  &kp DOT    &kp FSLH  &kp ENTER
&trans     &kp LALT  &kp LCTRL  &trans  &kp SPACE  &mo 4   U_KP_L  &trans  &trans  &trans     &kp RCTRL  &kp RALT
            >;

            display-name = "GAME";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&trans  &trans     &trans     &trans     &trans     &trans     U_MS_U  &trans  &trans  &trans  &trans  &trans  &trans
&trans  U_KP_R     U_MS_U     U_KP_M     &trans     &trans     U_MS_D  &trans  &trans  &trans  &trans  &trans  &trans
&trans  U_MS_L     U_MS_D     U_MS_R     &trans     &trans     U_MS_L  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)  U_MS_R  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     U_KP_L     &trans     &trans     U_KP_L  &trans  &trans  &trans  &trans  &trans
            >;

            display-name = "MOUSE";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans    &trans  &trans  &trans  &trans     U_MS_U  &trans     &trans  &trans  &trans  &trans  &trans
&trans  &trans    &kp N7  &kp N8  &kp N9  &kp N0     U_MS_D  &trans     &kp N7  &kp N8  &kp N9  &kp N0  &trans
&trans  &trans    &kp N4  &kp N5  &kp N6  &kp COMMA  U_MS_L  &kp COMMA  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &kp FSLH  &kp N1  &kp N2  &kp N3  &kp DOT    U_MS_R  &kp DOT    &kp N1  &kp N2  &kp N3  &trans  &trans
&trans  &trans    &trans  &trans  &trans  &trans     U_KP_L  &trans     &trans  &trans  &trans  &trans
            >;

            display-name = "NUMBER";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_4 {
            bindings = <
&trans  &trans        &trans     &trans         &trans     &trans     U_MS_U  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(LEFT)  &kp UP     &kp LC(RIGHT)  &kp HOME   &kp PG_UP  U_MS_D  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT      &kp DOWN   &kp RIGHT      &kp END    &kp PG_DN  U_MS_L  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(Z)     &kp LC(X)  &kp LC(C)      &kp LC(V)  &kp LC(Y)  U_MS_R  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans     &trans         &trans     &trans     U_KP_L  &trans  &trans  &trans  &trans  &trans
            >;

            display-name = "NAVI";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_5 {
            bindings = <
&trans  &trans  &kp F10  &kp F11  &kp F12  &trans  U_MS_U  &trans  &kp F10  &kp F11  &kp F12  &trans  &trans
&trans  &trans  &kp F7   &kp F8   &kp F9   &trans  U_MS_D  &trans  &kp F7   &kp F8   &kp F9   &trans  &trans
&trans  &trans  &kp F4   &kp F5   &kp F6   &trans  U_MS_L  &trans  &kp F4   &kp F5   &kp F6   &trans  &trans
&trans  &trans  &kp F1   &kp F2   &kp F3   &trans  U_MS_R  &trans  &kp F1   &kp F2   &kp F3   &trans  &trans
&trans  &trans  &trans   &trans   &trans   &trans  U_KP_L  &trans  &trans   &trans   &trans   &trans
            >;

            display-name = "FKEYS";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_6 {
            bindings = <
&out OUT_USB     &bt BT_SEL 0  &bt BT_SEL 1       &bt BT_SEL 2      &bt BT_SEL 3     &bt BT_SEL 4  U_MS_U  &bt BT_SEL 0  &bt BT_SEL 1       &bt BT_SEL 2      &bt BT_SEL 3     &bt BT_SEL 4  &out OUT_USB
&out OUT_BLE     &trans        &kp C_PREV         &kp C_PLAY_PAUSE  &kp C_NEXT       &trans        U_MS_D  &trans        &kp C_PREV         &kp C_PLAY_PAUSE  &kp C_NEXT       &trans        &out OUT_BLE
&rgb_ug RGB_ON   &trans        &kp C_VOLUME_DOWN  &kp C_MUTE        &kp C_VOLUME_UP  &trans        U_MS_L  &trans        &kp C_VOLUME_DOWN  &kp C_MUTE        &kp C_VOLUME_UP  &trans        &rgb_ug RGB_ON
&rgb_ug RGB_OFF  &trans        &trans             &trans            &trans           &trans        U_MS_R  &trans        &trans             &trans            &trans           &trans        &rgb_ug RGB_OFF
&trans           &trans        &trans             &trans            &trans           &trans        U_KP_L  &trans        &trans             &trans            &trans           &trans
            >;

            display-name = "SETTING";
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
